services:
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15
    container_name: cap_postgres
    environment:
      POSTGRES_DB: cap_platform
      POSTGRES_USER: cap_user
      POSTGRES_PASSWORD: cap_password
      POSTGRES_MULTIPLE_DATABASES: cap_platform,cap_analytics,cap_billing
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-postgres-databases.sh:/docker-entrypoint-initdb.d/init-multiple-postgres-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cap_user -d cap_platform"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cap_network

  # MongoDB - Document Storage
  mongodb:
    image: mongo:7.0
    container_name: cap_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: cap_user
      MONGO_INITDB_ROOT_PASSWORD: cap_password
      MONGO_INITDB_DATABASE: cap_conversations
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongodb.js:/docker-entrypoint-initdb.d/init-mongodb.js:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cap_network

  # Qdrant - Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: cap_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:6333 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cap_network

  # Redis - Caching and Pub/Sub
  redis:
    image: redis:7.2-alpine
    container_name: cap_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cap_network

  # RabbitMQ - Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: cap_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: cap_user
      RABBITMQ_DEFAULT_PASS: cap_password
      RABBITMQ_DEFAULT_VHOST: cap_vhost
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cap_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: cap_backend
    environment:
      - DATABASE_URL=postgresql://cap_user:cap_password@postgres:5432/cap_platform
      - MONGODB_URL=mongodb://cap_user:cap_password@mongodb:27017/cap_conversations
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://cap_user:cap_password@rabbitmq:5672/cap_vhost
      - ENVIRONMENT=development
      - DEBUG=True
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cap_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: cap_celery_worker
    command: python -m celery -A app.celery_app worker --loglevel=info --queues=default,high_priority,document_processing,analytics
    environment:
      - DATABASE_URL=postgresql://cap_user:cap_password@postgres:5432/cap_platform
      - MONGODB_URL=mongodb://cap_user:cap_password@mongodb:27017/cap_conversations
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://cap_user:cap_password@rabbitmq:5672/cap_vhost
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - cap_network
    restart: unless-stopped

  # Celery Beat - Periodic Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: cap_celery_beat
    command: python -m celery -A app.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://cap_user:cap_password@postgres:5432/cap_platform
      - MONGODB_URL=mongodb://cap_user:cap_password@mongodb:27017/cap_conversations
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://cap_user:cap_password@rabbitmq:5672/cap_vhost
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    volumes:
      - ./backend:/app
      - ./backend/celery-beat-data:/app/beat
    working_dir: /app
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - cap_network
    restart: unless-stopped

  # Flower - Celery Monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: cap_flower
    command: python -m celery -A app.celery_app flower --port=5555 --broker=redis://redis:6379/0
    environment:
      - DATABASE_URL=postgresql://cap_user:cap_password@postgres:5432/cap_platform
      - MONGODB_URL=mongodb://cap_user:cap_password@mongodb:27017/cap_conversations
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://cap_user:cap_password@rabbitmq:5672/cap_vhost
      - ENVIRONMENT=development
      - PYTHONPATH=/app
    ports:
      - "5555:5555"
    volumes:
      - ./backend:/app
    working_dir: /app
    depends_on:
      - rabbitmq
      - redis
      - backend
    networks:
      - cap_network
    restart: unless-stopped

  # Next.js Frontend (Optional for full-stack development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: cap_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - cap_network
    restart: unless-stopped

  # Nginx - Load Balancer/Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: cap_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/sites-available:/etc/nginx/sites-available
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - cap_network
    restart: unless-stopped

volumes:
  postgres_data:
  mongodb_data:
  qdrant_data:
  redis_data:
  rabbitmq_data:
  backend_uploads:
  nginx_logs:

networks:
  cap_network:
    driver: bridge